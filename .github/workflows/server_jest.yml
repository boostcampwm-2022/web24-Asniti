# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Server Jest

on:
  push:
    branches: [ "main", "dev","dev-be" ]
    paths: 'server/**'
  pull_request:
    branches: [ "main", "dev","dev-be" ]
    paths: 'server/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 해당 저장소의 코드를 가져옵니다.
      - name: Checkout
        uses: actions/checkout@v2

      # Node 18 버전을 사용합니다.
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'

      # yarn을 설치합니다.
      - name: Install Yarn
        run: npm install yarn

      # 설치된 yarn을 통해 패키지를 설치합니다.
      - name: Install dependencies
        run: yarn install

      # 테스트 수행과 그 테스트 결과를 xml파일로 생성합니다.
      - name: Run tests
        run: yarn server-test | tee ./coverage.txt

      # 테스트 결과를 담은 xml 파일을 레포트로 변환합니다.
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: test-results
          path: server/junit.xml
          fail-on-error: 'false'
          reporter: jest-junit        # Format of test results
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Jest Coverage Comment
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-path: ./coverage.txt
          coverage-summary-path: ./server/coverage/coverage-final.json
          junitxml-path: ./server/junit.xml
      - name: build 실패 시 Slack 알림
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 백엔드 빌드 실패 알림
          fields: repo, message, commit, author, action, eventName, ref, workflow, job, took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_FAIL_WEBHOOK_URL }}
        if: failure()